#!/usr/bin/env node

/*eslint-disable*/

var fs = require('fs');
var path = require('path');
var http = require('http');
var parallel = require('async/parallel');
var express = require('express');
var webpack = require('webpack');
var devMiddleware = require('webpack-dev-middleware');
var hotMiddleware = require('webpack-hot-middleware');
var historyApiFallback = require('connect-history-api-fallback');
var portfinder = require('portfinder');
var clc = require('cli-color');
var webpackConfig = require(path.resolve(process.cwd(), 'webpack.config'));

var banner = [
  "         __                       ",
  "       /   )          /)          ",
  "_____ /   _  _/_ _   // _  ______.",
  "     /   (_(_(__(_(_(/_(_)(_/     ",
  "     \\___/               .-/â€”    ",
  "                        (_/       "
].join("\n");


function createExpressApp() {
  var app = express();

  app.use(historyApiFallback());

  var compiler = webpack(webpackConfig);

  app.use(devMiddleware(compiler, {
    publicPath: webpackConfig.output.publicPath,
    stats: {
      assets: true,
      chunkModules: false,
      chunkOrigins: false,
      chunks: false,
      colors: true,
      hash: false,
      timings: true,
      version: false
    }
  }));

  app.use(hotMiddleware(compiler, {log: false}));

  app.use(express.static('.'));

  return app;
}

var app = createExpressApp();

parallel([
  function(callback) {
    var host = '0.0.0.0';
    portfinder.getPort({port: 8080, host: host}, function(err, port) {
      if (err) { throw err; }
      http.createServer(app).listen(port, host, function(err) {
        callback(err, 'http://' + host + ':' + port);
      });
    });
  },
  function(callback) {
    if (process.env.BOXEN_SOCKET_DIR) {
      var socketPath = process.env.BOXEN_SOCKET_DIR + '/catalog';
      if (fs.existsSync(socketPath)) {
        fs.unlinkSync(socketPath);
      }
      http.createServer(app).listen(socketPath, function(err) {
        callback(err, 'http://catalog.dev');
      });
    } else {
      callback(null, null);
    }
  },
], function(err, results) {
  if (err) { throw err };

  var urls = results
    .filter(function(x) { return x !== null; })
    .map(function(x) { return clc.underline(x); })
    .join(' and ');

  console.log(clc.erase.screen);
  console.log(clc.red(banner));
  console.log(clc.red('\nCatalog server running at ' + urls) + '\n');
});
